object CheckCommand "PowerShell Base" {
    import "plugin-check-command"
    command = [
        "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"
    ]
    timeout = 3m
}
object CheckCommand "Invoke-IcingaCheckStoragePool" {
    import "PowerShell Base"

    arguments += {
        "-RetireMissingPhysicalDisksCritical" = {
            description = "Critical threshold RetireMissingPhysicalDisks specifies whether the storage subsystem will automatically retire physical disks that are missing from this storage pool and replace them with hot spares or other physical disks that are available in the storage pool."
            value = "$IcingaCheckStoragePool_Object_RetireMissingPhysicalDisksCritical$"
            order = 17
        }
        "-IsReadOnlyCritical" = {
            description = "Used to specify a Critical threshold for the StoragePool IsReadOnly Attr."
            value = "$IcingaCheckStoragePool_Object_IsReadOnlyCritical$"
            order = 8
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state"
            value = "$IcingaCheckStoragePool_Object_Verbosity$"
            order = 18
        }
        "-IsPowerProtectedCritical" = {
            description = "Critical threshold for StoragePool IsPowerProtected is, whether the disks in this pool are able to tolerate power loss without data loss. For example, they automatically flush volatile buffers to non-volatile media after external power is disconnected."
            value = "$IcingaCheckStoragePool_Object_IsPowerProtectedCritical$"
            order = 13
        }
        "-HealthStatusWarning" = {
            description = "Warning threshold for Health of StoragePool is whether or not the storage pool can maintain the required redundancy levels."
            value = "$IcingaCheckStoragePool_Object_HealthStatusWarning$"
            order = 14
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckStoragePool_Switchparameter_NoPerfData$"
            order = 99
        }
        "-FreeSpaceWarning" = {
            description = "Used to specify a Warning threshold for the StoragePool FreeSpaces in GB. This value is a decreasing metric which will require you to add a ':' behind the threshold, like '20GB:' to check if free space is lower compared to your threshold"
            value = "$IcingaCheckStoragePool_Object_FreeSpaceWarning$"
            order = 4
        }
        "-C" = {
            value = "try { Use-Icinga; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; exit 3; }; Exit-IcingaPluginNotInstalled 'Invoke-IcingaCheckStoragePool'; exit Invoke-IcingaCheckStoragePool"
            order = 0
        }
        "-FreeSpaceCritical" = {
            description = "Used to specify a Critical threshold for the StoragePool FreeSpaces in GB. This value is a decreasing metric which will require you to add a ':' behind the threshold, like '20GB:' to check if free space is lower compared to your threshold"
            value = "$IcingaCheckStoragePool_Object_FreeSpaceCritical$"
            order = 5
        }
        "-IncludePrimordial" = {
            set_if = "$IcingaCheckStoragePool_Switchparameter_IncludePrimordial$"
            order = 99
        }
        "-IncludeStoragePool" = {
            description = "With this parameter you can filter out which StoragePools you want to check, provided you have several StoragePools on your system."
            value = {{
                var arr = macro("$IcingaCheckStoragePool_Array_IncludeStoragePool$");
                if (len(arr) == 0) {
                return "@()";
                }
                return arr.join(",");
            }}
            order = 2
        }
        "-ExcludeStoragePool" = {
            description = "With this parameter you can filter out which StoragePools you do not want to check, provided you have several StoragePools on your system."
            value = {{
                var arr = macro("$IcingaCheckStoragePool_Array_ExcludeStoragePool$");
                if (len(arr) == 0) {
                return "@()";
                }
                return arr.join(",");
            }}
            order = 3
        }
        "-CapacityWarning" = {
            description = "Used to specify a Warning threshold for the StoragePool Capacity."
            value = "$IcingaCheckStoragePool_Object_CapacityWarning$"
            order = 9
        }
        "-TotalUsedCritical" = {
            description = "Used to specify TotalUsed Critical threshold in GB."
            value = "$IcingaCheckStoragePool_Object_TotalUsedCritical$"
            order = 7
        }
        "-CapacityCritical" = {
            description = "Used to specify a Critical threshold for the StoragePool Capacity."
            value = "$IcingaCheckStoragePool_Object_CapacityCritical$"
            order = 10
        }
        "-SupportsDeduplicationCritical" = {
            description = "Critical threshold StoragePool SupportsDeduplication is, whether the storage pool supports data duplication or not."
            value = "$IcingaCheckStoragePool_Object_SupportsDeduplicationCritical$"
            order = 12
        }
        "-HealthStatusCritical" = {
            description = "Critical threshold for Health of StoragePool is whether or not the storage pool can maintain the required redundancy levels."
            value = "$IcingaCheckStoragePool_Object_HealthStatusCritical$"
            order = 15
        }
        "-ClearOnDeallocateCritical" = {
            description = "Critical threshold for StoragePool ClearOnDeallocate is, if physical disks should be zeroed (cleared of all data) when unmapped or removed from the storage pool."
            value = "$IcingaCheckStoragePool_Object_ClearOnDeallocateCritical$"
            order = 11
        }
        "-RetireMissingPhysicalDisksWarning" = {
            description = "Warning threshold RetireMissingPhysicalDisks specifies whether the storage subsystem will automatically retire physical disks that are missing from this storage pool and replace them with hot spares or other physical disks that are available in the storage pool."
            value = "$IcingaCheckStoragePool_Object_RetireMissingPhysicalDisksWarning$"
            order = 16
        }
        "-TotalUsedWarning" = {
            description = "Used to specify TotalUsed Warning threshold in GB."
            value = "$IcingaCheckStoragePool_Object_TotalUsedWarning$"
            order = 6
        }
    }
    vars.IcingaCheckStoragePool_Switchparameter_IncludePrimordial = false
    vars.IcingaCheckStoragePool_Switchparameter_NoPerfData = false
}

object CheckCommand "Invoke-IcingaCheckCertificate" {
    import "PowerShell Base"

    arguments += {
        "-CertStorePath" = {
            description = "Used to specify which path within the CertStore should be checked."
            value = "$IcingaCheckCertificate_Object_CertStorePath$"
            order = 8
        }
        "-CriticalEnd" = {
            description = "Used to specify a Critical range for the end date of an certificate. In this case a string. Allowed units include: ms, s, m, h, d, w, M, y"
            value = "$IcingaCheckCertificate_Object_CriticalEnd$"
            order = 4
        }
        "-Verbosity" = {
            description = "Other"
            value = "$IcingaCheckCertificate_Int32_Verbosity$"
            order = 11
        }
        "-CertSubject" = {
            description = "Used to specify an array of Subjects, which are used to determine what certificate to check, within the CertStore."
            value = {{
                var arr = macro("$IcingaCheckCertificate_Array_CertSubject$");
                if (len(arr) == 0) {
                return "@()";
                }
                return arr.join(",");
            }}
            order = 7
        }
        "-WarningEnd" = {
            description = "Used to specify a Warning range for the end date of an certificate. In this case a string. Allowed units include: ms, s, m, h, d, w, M, y"
            value = "$IcingaCheckCertificate_Object_WarningEnd$"
            order = 3
        }
        "-CriticalStart" = {
            description = "Used to specify a date. The start date of the certificate has to be past the date specified, otherwise the check results in critical. Use carefully. Use format like: 'yyyy-MM-dd'"
            value = "$IcingaCheckCertificate_Object_CriticalStart$"
            order = 2
        }
        "-C" = {
            value = "try { Use-Icinga; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; exit 3; }; Exit-IcingaPluginNotInstalled 'Invoke-IcingaCheckCertificate'; exit Invoke-IcingaCheckCertificate"
            order = 0
        }
        "-CertStore" = {
            description = "Used to specify which CertStore to check. Valid choices are '*', 'LocalMachine', 'CurrentUser'"
            value = "$IcingaCheckCertificate_String_CertStore$"
            order = 5
        }
        "-Trusted" = {
            set_if = "$IcingaCheckCertificate_Switchparameter_Trusted$"
            order = 99
        }
        "-CertPaths" = {
            description = "Used to specify an array of paths on your system, where certificate files are. Use with CertName."
            value = {{
                var arr = macro("$IcingaCheckCertificate_Array_CertPaths$");
                if (len(arr) == 0) {
                return "@()";
                }
                return arr.join(",");
            }}
            order = 9
        }
        "-CertThumbprint" = {
            description = "Used to specify an array of Thumbprints, which are used to determine what certificate to check, within the CertStore."
            value = {{
                var arr = macro("$IcingaCheckCertificate_Array_CertThumbprint$");
                if (len(arr) == 0) {
                return "@()";
                }
                return arr.join(",");
            }}
            order = 6
        }
        "-Recurse" = {
            set_if = "$IcingaCheckCertificate_Switchparameter_Recurse$"
            order = 99
        }
        "-CertName" = {
            description = "Used to specify an array of certificate names of certificate files to check. Use with CertPaths."
            value = {{
                var arr = macro("$IcingaCheckCertificate_Array_CertName$");
                if (len(arr) == 0) {
                return "@()";
                }
                return arr.join(",");
            }}
            order = 10
        }
    }
    vars.IcingaCheckCertificate_Switchparameter_Recurse = false
    vars.IcingaCheckCertificate_Switchparameter_Trusted = false
}

object CheckCommand "Invoke-IcingaCheckICMP" {
    import "PowerShell Base"

    arguments += {
        "-WarningPl" = {
            description = "Treshold on which the plugin will return 'WARNING' for possible packet loss in %"
            value = "$IcingaCheckICMP_Object_WarningPl$"
            order = 4
        }
        "-Hostname" = {
            description = "The target hosts IP or FQDN to send ICMP requests too"
            value = "$IcingaCheckICMP_String_Hostname$"
            order = 6
        }
        "-Warning" = {
            description = "Treshold on which the plugin will return 'WARNING' for the response time in ms"
            value = "$IcingaCheckICMP_Object_Warning$"
            order = 2
        }
        "-Verbosity" = {
            description = "Increase the printed output message by adding additional details or print all data regardless of their status"
            value = "$IcingaCheckICMP_Int32_Verbosity$"
            order = 9
        }
        "-PacketCount" = {
            description = "The amount of packets send to the target host"
            value = "$IcingaCheckICMP_Int32_PacketCount$"
            order = 7
        }
        "-IPv6" = {
            set_if = "$IcingaCheckICMP_Switchparameter_IPv6$"
            order = 99
        }
        "-PacketSize" = {
            description = "The size of each packet send to the target host"
            value = "$IcingaCheckICMP_Int32_PacketSize$"
            order = 8
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckICMP_Switchparameter_NoPerfData$"
            order = 99
        }
        "-Critical" = {
            description = "Treshold on which the plugin will return 'CRITICAL' for the response time in ms"
            value = "$IcingaCheckICMP_Object_Critical$"
            order = 3
        }
        "-IPv4" = {
            set_if = "$IcingaCheckICMP_Switchparameter_IPv4$"
            order = 99
        }
        "-CriticalPl" = {
            description = "Treshold on which the plugin will return 'CRITICAL' for the response time in ms"
            value = "$IcingaCheckICMP_Object_CriticalPl$"
            order = 5
        }
        "-C" = {
            value = "try { Use-Icinga; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; exit 3; }; Exit-IcingaPluginNotInstalled 'Invoke-IcingaCheckICMP'; exit Invoke-IcingaCheckICMP"
            order = 0
        }
    }
    vars.IcingaCheckICMP_Switchparameter_NoPerfData = false
    vars.IcingaCheckICMP_Switchparameter_IPv6 = false
    vars.IcingaCheckICMP_Switchparameter_IPv4 = false
}

object CheckCommand "Invoke-IcingaCheckDirectory" {
    import "PowerShell Base"

    arguments += {
        "-Path" = {
            description = "Used to specify a path. e.g. 'C:\\Users\\Icinga\\Downloads'"
            value = "$IcingaCheckDirectory_String_Path$"
            order = 2
        }
        "-Verbosity" = {
            value = "$IcingaCheckDirectory_Int32_Verbosity$"
            order = 14
        }
        "-CreationOlderThan" = {
            description = "String that expects input format like '20d', which translates to 20 days. Allowed units: ms, s, m, h, d, w, M, y.  Thereby all files which have a creation date older then 20 days are considered within the check."
            value = "$IcingaCheckDirectory_String_CreationOlderThan$"
            order = 10
        }
        "-FileSizeGreaterThan" = {
            description = "String that expects input format like '20MB', which translates to the filze size 20 MB. Allowed units: B, KB, MB, GB, TB.  Thereby all files with a size of 20 MB or larger are considered within the check."
            value = "$IcingaCheckDirectory_String_FileSizeGreaterThan$"
            order = 12
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckDirectory_Switchparameter_NoPerfData$"
            order = 99
        }
        "-ChangeYoungerThan" = {
            description = "String that expects input format like '20d', which translates to 20 days. Allowed units: ms, s, m, h, d, w, M, y.  Thereby all files which have a change date younger then 20 days are considered within the check."
            value = "$IcingaCheckDirectory_String_ChangeYoungerThan$"
            order = 7
        }
        "-FileSizeSmallerThan" = {
            description = "String that expects input format like '5MB', which translates to the filze size 5 MB. Allowed units: B, KB, MB, GB, TB.  Thereby all files with a size of 5 MB or less are considered within the check."
            value = "$IcingaCheckDirectory_String_FileSizeSmallerThan$"
            order = 13
        }
        "-C" = {
            value = "try { Use-Icinga; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; exit 3; }; Exit-IcingaPluginNotInstalled 'Invoke-IcingaCheckDirectory'; exit Invoke-IcingaCheckDirectory"
            order = 0
        }
        "-ChangeOlderThan" = {
            description = "String that expects input format like '20d', which translates to 20 days. Allowed units: ms, s, m, h, d, w, M, y.  Thereby all files which have a change date older then 20 days are considered within the check."
            value = "$IcingaCheckDirectory_String_ChangeOlderThan$"
            order = 8
        }
        "-CreationTimeEqual" = {
            description = "String that expects input format like '20d', which translates to 20 days. Allowed units: ms, s, m, h, d, w, M, y.  Thereby all files which have been created 20 days ago are considered within the check."
            value = "$IcingaCheckDirectory_String_CreationTimeEqual$"
            order = 9
        }
        "-ChangeTimeEqual" = {
            description = "String that expects input format like '20d', which translates to 20 days. Allowed units: ms, s, m, h, d, w, M, y.  Thereby all files which have been changed 20 days ago are considered within the check."
            value = "$IcingaCheckDirectory_String_ChangeTimeEqual$"
            order = 6
        }
        "-FileNames" = {
            description = "Used to specify an array of filenames or expressions to match against results to filter for specific files.  e.g '*.txt', '*.sql' # Fiends all files ending with .txt and .sql"
            value = {{
                var arr = macro("$IcingaCheckDirectory_Array_FileNames$");
                if (len(arr) == 0) {
                return "@()";
                }
                return arr.join(",");
            }}
            order = 3
        }
        "-Critical" = {
            description = "Used to specify a Critical threshold. Follows the Icinga plugin threshold"
            value = "$IcingaCheckDirectory_Object_Critical$"
            order = 4
        }
        "-CreationYoungerThan" = {
            description = "String that expects input format like '20d', which translates to 20 days. Allowed units: ms, s, m, h, d, w, M, y.  Thereby all files which have a creation date younger then 20 days are considered within the check."
            value = "$IcingaCheckDirectory_String_CreationYoungerThan$"
            order = 11
        }
        "-Recurse" = {
            set_if = "$IcingaCheckDirectory_Switchparameter_Recurse$"
            order = 99
        }
        "-Warning" = {
            description = "Used to specify a Warning threshold. Follows the Icinga plugin threshold"
            value = "$IcingaCheckDirectory_Object_Warning$"
            order = 5
        }
    }
    vars.IcingaCheckDirectory_Switchparameter_NoPerfData = false
    vars.IcingaCheckDirectory_Switchparameter_Recurse = false
}

object CheckCommand "Invoke-IcingaCheckUptime" {
    import "PowerShell Base"

    arguments += {
        "-C" = {
            value = "try { Use-Icinga; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; exit 3; }; Exit-IcingaPluginNotInstalled 'Invoke-IcingaCheckUptime'; exit Invoke-IcingaCheckUptime"
            order = 0
        }
        "-Warning" = {
            description = "Used to specify a Warning threshold. In this case a string. Allowed units include: ms, s, m, h, d, w, M, y"
            value = "$IcingaCheckUptime_String_Warning$"
            order = 2
        }
        "-Critical" = {
            description = "Used to specify a Critical threshold. In this case a string. Allowed units include: ms, s, m, h, d, w, M, y"
            value = "$IcingaCheckUptime_String_Critical$"
            order = 3
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckUptime_Switchparameter_NoPerfData$"
            order = 99
        }
        "-Verbosity" = {
            value = "$IcingaCheckUptime_Int32_Verbosity$"
            order = 4
        }
    }
    vars.IcingaCheckUptime_Switchparameter_NoPerfData = false
}

object CheckCommand "Invoke-IcingaCheckUpdates" {
    import "PowerShell Base"

    arguments += {
        "-C" = {
            value = "try { Use-Icinga; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; exit 3; }; Exit-IcingaPluginNotInstalled 'Invoke-IcingaCheckUpdates'; exit Invoke-IcingaCheckUpdates"
            order = 0
        }
        "-Verbosity" = {
            value = "$IcingaCheckUpdates_Int32_Verbosity$"
            order = 5
        }
        "-Warning" = {
            description = "Used to specify a Warning threshold. In this case an integer value."
            value = "$IcingaCheckUpdates_Object_Warning$"
            order = 3
        }
        "-UpdateFilter" = {
            value = {{
                var arr = macro("$IcingaCheckUpdates_Array_UpdateFilter$");
                if (len(arr) == 0) {
                return "@()";
                }
                return arr.join(",");
            }}
            order = 2
        }
        "-Critical" = {
            description = "Used to specify a Critical threshold. In this case an integer value."
            value = "$IcingaCheckUpdates_Object_Critical$"
            order = 4
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckUpdates_Switchparameter_NoPerfData$"
            order = 99
        }
    }
    vars.IcingaCheckUpdates_Switchparameter_NoPerfData = false
}

object CheckCommand "Invoke-IcingaCheckPerfcounter" {
    import "PowerShell Base"

    arguments += {
        "-PerfCounter" = {
            description = "Used to specify an array of performance counter to check against."
            value = {{
                var arr = macro("$IcingaCheckPerfcounter_Array_PerfCounter$");
                if (len(arr) == 0) {
                return "@()";
                }
                return arr.join(",");
            }}
            order = 2
        }
        "-Verbosity" = {
            value = "$IcingaCheckPerfcounter_Int32_Verbosity$"
            order = 5
        }
        "-Warning" = {
            description = "Used to specify a Warning threshold. In this case an ??? value."
            value = "$IcingaCheckPerfcounter_Object_Warning$"
            order = 3
        }
        "-Critical" = {
            description = "Used to specify a Critical threshold. In this case an ??? value."
            value = "$IcingaCheckPerfcounter_Object_Critical$"
            order = 4
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckPerfcounter_Switchparameter_NoPerfData$"
            order = 99
        }
        "-C" = {
            value = "try { Use-Icinga; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; exit 3; }; Exit-IcingaPluginNotInstalled 'Invoke-IcingaCheckPerfcounter'; exit Invoke-IcingaCheckPerfcounter"
            order = 0
        }
    }
    vars.IcingaCheckPerfcounter_Switchparameter_NoPerfData = false
}

object CheckCommand "Invoke-IcingaCheckNLA" {
    import "PowerShell Base"

    arguments += {
        "-C" = {
            value = "try { Use-Icinga; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; exit 3; }; Exit-IcingaPluginNotInstalled 'Invoke-IcingaCheckNLA'; exit Invoke-IcingaCheckNLA"
            order = 0
        }
        "-Profile" = {
            description = "Used to specify the profile to check. Available profiles are 'DomainAuthenticated', 'Public', 'Private'"
            value = "$IcingaCheckNLA_String_Profile$"
            order = 2
        }
        "-NICs" = {
            description = "Used to specify the NICs where to check the filewall profile. When not presented every nic which is active will be checked"
            value = {{
                var arr = macro("$IcingaCheckNLA_Array_NICs$");
                if (len(arr) == 0) {
                return "@()";
                }
                return arr.join(",");
            }}
            order = 4
        }
        "-Verbosity" = {
            value = "$IcingaCheckNLA_Int32_Verbosity$"
            order = 3
        }
    }
}

object CheckCommand "Invoke-IcingaCheckMemory" {
    import "PowerShell Base"

    arguments += {
        "-C" = {
            value = "try { Use-Icinga; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; exit 3; }; Exit-IcingaPluginNotInstalled 'Invoke-IcingaCheckMemory'; exit Invoke-IcingaCheckMemory"
            order = 0
        }
        "-Verbosity" = {
            value = "$IcingaCheckMemory_Int32_Verbosity$"
            order = 6
        }
        "-Warning" = {
            description = "Used to specify a Warning threshold. In this case an string value. The string has to be like, '20B', '20KB', '20MB', '20GB', '20TB', '20PB' This is using the default Icinga threshold handling."
            value = "$IcingaCheckMemory_String_Warning$"
            order = 3
        }
        "-CriticalPercent" = {
            description = "Used to specify a Critical threshold for the memory usage in percent, like 30 for 30%. This is using the default Icinga threshold handling."
            value = "$IcingaCheckMemory_Object_CriticalPercent$"
            order = 4
        }
        "-Critical" = {
            description = "Used to specify a Critical threshold. In this case an string value. The string has to be like, '20B', '20KB', '20MB', '20GB', '20TB', '20PB' This is using the default Icinga threshold handling."
            value = "$IcingaCheckMemory_String_Critical$"
            order = 2
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckMemory_Switchparameter_NoPerfData$"
            order = 99
        }
        "-WarningPercent" = {
            description = "Used to specify a Warning threshold for the memory usage in percent, like 30 for 30%. This is using the default Icinga threshold handling."
            value = "$IcingaCheckMemory_Object_WarningPercent$"
            order = 5
        }
    }
    vars.IcingaCheckMemory_Switchparameter_NoPerfData = false
}

object CheckCommand "Invoke-IcingaCheckProcessCount" {
    import "PowerShell Base"

    arguments += {
        "-C" = {
            value = "try { Use-Icinga; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; exit 3; }; Exit-IcingaPluginNotInstalled 'Invoke-IcingaCheckProcessCount'; exit Invoke-IcingaCheckProcessCount"
            order = 0
        }
        "-Verbosity" = {
            value = "$IcingaCheckProcessCount_Int32_Verbosity$"
            order = 5
        }
        "-Warning" = {
            description = "Used to specify a Warning threshold. In this case an integer value."
            value = "$IcingaCheckProcessCount_Object_Warning$"
            order = 2
        }
        "-Process" = {
            description = "Used to specify an array of processes to count and match against. e.g. conhost,wininit"
            value = {{
                var arr = macro("$IcingaCheckProcessCount_Array_Process$");
                if (len(arr) == 0) {
                return "@()";
                }
                return arr.join(",");
            }}
            order = 4
        }
        "-Critical" = {
            description = "Used to specify a Critical threshold. In this case an integer value."
            value = "$IcingaCheckProcessCount_Object_Critical$"
            order = 3
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckProcessCount_Switchparameter_NoPerfData$"
            order = 99
        }
    }
    vars.IcingaCheckProcessCount_Switchparameter_NoPerfData = false
}

object CheckCommand "Invoke-IcingaCheckUsers" {
    import "PowerShell Base"

    arguments += {
        "-C" = {
            value = "try { Use-Icinga; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; exit 3; }; Exit-IcingaPluginNotInstalled 'Invoke-IcingaCheckUsers'; exit Invoke-IcingaCheckUsers"
            order = 0
        }
        "-Verbosity" = {
            value = "$IcingaCheckUsers_Int32_Verbosity$"
            order = 5
        }
        "-Warning" = {
            description = "Used to specify a Warning threshold. In this case an integer value."
            value = "$IcingaCheckUsers_Object_Warning$"
            order = 3
        }
        "-Critical" = {
            description = "Used to specify a Critical threshold. In this case an integer value."
            value = "$IcingaCheckUsers_Object_Critical$"
            order = 4
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckUsers_Switchparameter_NoPerfData$"
            order = 99
        }
        "-Username" = {
            description = "Used to specify an array of usernames to match against.  e.g 'Administrator', 'Icinga'"
            value = {{
                var arr = macro("$IcingaCheckUsers_Array_Username$");
                if (len(arr) == 0) {
                return "@()";
                }
                return arr.join(",");
            }}
            order = 2
        }
    }
    vars.IcingaCheckUsers_Switchparameter_NoPerfData = false
}

object CheckCommand "Invoke-IcingaCheckDiskHealth" {
    import "PowerShell Base"

    arguments += {
        "-DiskReadByteSecWarning" = {
            description = "Warning threshold for disk Read Bytes/sec is the rate at which bytes are transferred from the disk during read operations."
            value = "$IcingaCheckDiskHealth_Object_DiskReadByteSecWarning$"
            order = 14
        }
        "-C" = {
            value = "try { Use-Icinga; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; exit 3; }; Exit-IcingaPluginNotInstalled 'Invoke-IcingaCheckDiskHealth'; exit Invoke-IcingaCheckDiskHealth"
            order = 0
        }
        "-DiskWriteByteSecWarning" = {
            description = "Warning threshold for disk Write Bytes/sec is rate at which bytes are transferred to the disk during write operations."
            value = "$IcingaCheckDiskHealth_Object_DiskWriteByteSecWarning$"
            order = 16
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckDiskHealth_Switchparameter_NoPerfData$"
            order = 99
        }
        "-ExcludeDisk" = {
            description = "Specify the index id of disks you want to exclude from checks. Example 0, 1"
            value = {{
                var arr = macro("$IcingaCheckDiskHealth_Array_ExcludeDisk$");
                if (len(arr) == 0) {
                return "@()";
                }
                return arr.join(",");
            }}
            order = 3
        }
        "-IgnoreReadOnlyDisks" = {
            set_if = "$IcingaCheckDiskHealth_Switchparameter_IgnoreReadOnlyDisks$"
            order = 99
        }
        "-IncludeDisk" = {
            description = "Specify the index id of disks you want to include for checks. Example 0, 1"
            value = {{
                var arr = macro("$IcingaCheckDiskHealth_Array_IncludeDisk$");
                if (len(arr) == 0) {
                return "@()";
                }
                return arr.join(",");
            }}
            order = 2
        }
        "-DiskQueueAvgLenCritical" = {
            description = "Critical threshold for Avg. Disk Queue Length is the average number of both read and write requests that were queued for the selected disk during the sample interval."
            value = "$IcingaCheckDiskHealth_Object_DiskQueueAvgLenCritical$"
            order = 13
        }
        "-DiskQueueLenWarning" = {
            description = "Warning threshold for current Disk Queue Length is the number of requests outstanding on the disk at the time the performance data is collected. It also includes requests in service at the time of the collection. This is a instantaneous snapshot, not an average over the time interval. Multi-spindle disk devices can have multiple requests that are active at one time, but other concurrent requests are awaiting service. This counter might reflect a transitory high or low queue length, but if there is a sustained load on the disk drive, it is likely that this will be consistently high. Requests experience delays proportional to the length of this queue minus the number of spindles on the disks. For good performance, this difference should average less than two."
            value = "$IcingaCheckDiskHealth_Object_DiskQueueLenWarning$"
            order = 10
        }
        "-IncludePartition" = {
            description = "Specify the partition drive letters for disks to include for checks. Example C:, D:"
            value = {{
                var arr = macro("$IcingaCheckDiskHealth_Array_IncludePartition$");
                if (len(arr) == 0) {
                return "@()";
                }
                return arr.join(",");
            }}
            order = 4
        }
        "-DiskAvgReadSecCritical" = {
            description = "Critical threshold for avg. Disk sec/Read is the average time, in seconds, of a read of data from the disk. If the threshold values are not in seconds, please enter a unit such as (ms, s, m, h, ...)"
            value = "$IcingaCheckDiskHealth_Object_DiskAvgReadSecCritical$"
            order = 21
        }
        "-DiskWriteSecCritical" = {
            description = "Critical threshold for disk Writes/sec is the rate of write operations on the disk."
            value = "$IcingaCheckDiskHealth_Object_DiskWriteSecCritical$"
            order = 9
        }
        "-DiskQueueAvgLenWarning" = {
            description = "Warning threshold for Avg. Disk Queue Length is the average number of both read and write requests that were queued for the selected disk during the sample interval."
            value = "$IcingaCheckDiskHealth_Object_DiskQueueAvgLenWarning$"
            order = 12
        }
        "-DiskAvgReadSecWarning" = {
            description = "Warning threshold for avg. Disk sec/Read is the average time, in seconds, of a read of data from the disk. If the threshold values are not in seconds, please enter a unit such as (ms, s, m, h, ...)"
            value = "$IcingaCheckDiskHealth_Object_DiskAvgReadSecWarning$"
            order = 20
        }
        "-DiskWriteByteSecCritical" = {
            description = "Critical threshold for disk Write Bytes/sec is rate at which bytes are transferred to the disk during write operations."
            value = "$IcingaCheckDiskHealth_Object_DiskWriteByteSecCritical$"
            order = 17
        }
        "-DiskAvgTransSecWarning" = {
            description = "Warning threshold for avg. Disk sec/Transfer is the time, in seconds, of the average disk transfer. If the threshold values are not in seconds, please enter a unit such as (ms, s, m, h, ...)"
            value = "$IcingaCheckDiskHealth_Object_DiskAvgTransSecWarning$"
            order = 18
        }
        "-DiskAvgWriteSecWarning" = {
            description = "Warning threshold for Avg. Disk sec/Write is the average time, in seconds, of a write of data to the disk. If the threshold values are not in seconds, please enter a unit such as (ms, s, m, h, ...)"
            value = "$IcingaCheckDiskHealth_Object_DiskAvgWriteSecWarning$"
            order = 22
        }
        "-Verbosity" = {
            value = "$IcingaCheckDiskHealth_Int32_Verbosity$"
            order = 24
        }
        "-DiskReadSecWarning" = {
            description = "Warning threshold for disk Reads/sec is the rate of read operations on the disk."
            value = "$IcingaCheckDiskHealth_Object_DiskReadSecWarning$"
            order = 6
        }
        "-ExcludePartition" = {
            description = "Specify the partition drive letters for disks to exclude from checks. Example C:, D:"
            value = {{
                var arr = macro("$IcingaCheckDiskHealth_Array_ExcludePartition$");
                if (len(arr) == 0) {
                return "@()";
                }
                return arr.join(",");
            }}
            order = 5
        }
        "-DiskReadSecCritical" = {
            description = "Critical treshold for disk Reads/sec is the rate of read operations on the disk."
            value = "$IcingaCheckDiskHealth_Object_DiskReadSecCritical$"
            order = 7
        }
        "-CheckLogicalOnly" = {
            set_if = "$IcingaCheckDiskHealth_Switchparameter_CheckLogicalOnly$"
            order = 99
        }
        "-DiskReadByteSecCritical" = {
            description = "Critical threshold for disk Read Bytes/sec is the rate at which bytes are transferred from the disk during read operations."
            value = "$IcingaCheckDiskHealth_Object_DiskReadByteSecCritical$"
            order = 15
        }
        "-DiskAvgWriteSecCritical" = {
            description = "Critical threshold for Avg. Disk sec/Write is the average time, in seconds, of a write of data to the disk. If the threshold values are not in seconds, please enter a unit such as (ms, s, m, h, ...)"
            value = "$IcingaCheckDiskHealth_Object_DiskAvgWriteSecCritical$"
            order = 23
        }
        "-IgnoreOfflineDisks" = {
            set_if = "$IcingaCheckDiskHealth_Switchparameter_IgnoreOfflineDisks$"
            order = 99
        }
        "-DiskWriteSecWarning" = {
            description = "Warning theeshold for disk Writes/sec is the rate of write operations on the disk."
            value = "$IcingaCheckDiskHealth_Object_DiskWriteSecWarning$"
            order = 8
        }
        "-DiskQueueLenCritical" = {
            description = "Critical threshold for current Disk Queue Length is the number of requests outstanding on the disk at the time the performance data is collected. It also includes requests in service at the time of the collection. This is a instantaneous snapshot, not an average over the time interval. Multi-spindle disk devices can have multiple requests that are active at one time, but other concurrent requests are awaiting service. This counter might reflect a transitory high or low queue length, but if there is a sustained load on the disk drive, it is likely that this will be consistently high. Requests experience delays proportional to the length of this queue minus the number of spindles on the disks. For good performance, this difference should average less than two."
            value = "$IcingaCheckDiskHealth_Object_DiskQueueLenCritical$"
            order = 11
        }
        "-DiskAvgTransSecCritical" = {
            description = "Critical threshold for avg. Disk sec/Transfer is the time, in seconds, of the average disk transfer. If the threshold values are not in seconds, please enter a unit such as (ms, s, m, h, ...)"
            value = "$IcingaCheckDiskHealth_Object_DiskAvgTransSecCritical$"
            order = 19
        }
    }
    vars.IcingaCheckDiskHealth_Switchparameter_IgnoreReadOnlyDisks = false
    vars.IcingaCheckDiskHealth_Switchparameter_IgnoreOfflineDisks = false
    vars.IcingaCheckDiskHealth_Switchparameter_NoPerfData = false
    vars.IcingaCheckDiskHealth_Switchparameter_CheckLogicalOnly = false
}

object CheckCommand "Invoke-IcingaCheckTimeSync" {
    import "PowerShell Base"

    arguments += {
        "-C" = {
            value = "try { Use-Icinga; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; exit 3; }; Exit-IcingaPluginNotInstalled 'Invoke-IcingaCheckTimeSync'; exit Invoke-IcingaCheckTimeSync"
            order = 0
        }
        "-Verbosity" = {
            value = "$IcingaCheckTimeSync_Int32_Verbosity$"
            order = 8
        }
        "-Warning" = {
            description = "Used to specify a offset Warning threshold e.g 10ms or 0.01s"
            value = "$IcingaCheckTimeSync_Object_Warning$"
            order = 4
        }
        "-Timeout" = {
            description = "Seconds before connection times out (default: 10)"
            value = "$IcingaCheckTimeSync_Int32_Timeout$"
            order = 6
        }
        "-Port" = {
            description = "Port number (default: 123)"
            value = "$IcingaCheckTimeSync_Int32_Port$"
            order = 7
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckTimeSync_Switchparameter_NoPerfData$"
            order = 99
        }
        "-Critical" = {
            description = "Used to specify a offset Critical threshold e.g 20ms or 0.02s."
            value = "$IcingaCheckTimeSync_Object_Critical$"
            order = 5
        }
        "-Server" = {
            description = "The NTP Server you want to connect to."
            value = "$IcingaCheckTimeSync_String_Server$"
            order = 2
        }
        "-TimeOffset" = {
            description = "The maximum acceptable offset between the local clock and the NTP Server, in seconds e.g. if you allow up to 0.5s timeoffset you can also enter 500ms. Invoke-IcingaCheckTimeSync will return OK, if there is no difference between them, WARNING, if the time difference exceeds the Warning threshold, CRITICAL, if the time difference exceeds the Critical threshold."
            value = "$IcingaCheckTimeSync_Object_TimeOffset$"
            order = 3
        }
        "-IPV4" = {
            set_if = "$IcingaCheckTimeSync_Switchparameter_IPV4$"
            order = 99
        }
    }
    vars.IcingaCheckTimeSync_Switchparameter_NoPerfData = false
    vars.IcingaCheckTimeSync_Switchparameter_IPV4 = false
}

object CheckCommand "Invoke-IcingaCheckNetworkInterface" {
    import "PowerShell Base"

    arguments += {
        "-PacketSentSecWarn" = {
            description = "Warning threshold for network Interface Packets Sent/sec is the rate at which packets are sent on the network interface."
            value = "$IcingaCheckNetworkInterface_Object_PacketSentSecWarn$"
            order = 8
        }
        "-C" = {
            value = "try { Use-Icinga; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; exit 3; }; Exit-IcingaPluginNotInstalled 'Invoke-IcingaCheckNetworkInterface'; exit Invoke-IcingaCheckNetworkInterface"
            order = 0
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckNetworkInterface_Switchparameter_NoPerfData$"
            order = 99
        }
        "-LinkSpeedCrit" = {
            description = "Critical threshold for the transmit link speed in (10 MBit, 100 MBit, 1 GBit, 10 GBit, 100 GBit, ...) of the network Interface."
            value = "$IcingaCheckNetworkInterface_Object_LinkSpeedCrit$"
            order = 29
        }
        "-DeviceReceivedBytesSecWarn" = {
            description = "Warning threshold for network Interface Bytes Received/sec is the rate at which bytes are received over each network adapter, including framing characters."
            value = "$IcingaCheckNetworkInterface_Object_DeviceReceivedBytesSecWarn$"
            order = 26
        }
        "-PackteOutboundErrorCrit" = {
            description = "Critical threshold for network Interface Packets Outbound Errors is the number of outbound packets that could not be transmitted because of errors."
            value = "$IcingaCheckNetworkInterface_Object_PackteOutboundErrorCrit$"
            order = 13
        }
        "-IncomingAvgBandUsageCrit" = {
            description = "Critical threshold for network Interface avg. Bytes Received/sec is the average of incoming Bytes."
            value = "$IcingaCheckNetworkInterface_Object_IncomingAvgBandUsageCrit$"
            order = 19
        }
        "-PackteReceivedErrorCrit" = {
            description = "Critical threshold for network Interface Packets Received Errors is the number of inbound packets that contained errors preventing them from being deliverable to a higher-layer protocol."
            value = "$IcingaCheckNetworkInterface_Object_PackteReceivedErrorCrit$"
            order = 11
        }
        "-DeviceSentBytesSecCrit" = {
            description = "Critical threshold for network Interface Bytes Sent/sec is the rate at which bytes are sent over each network adapter, including framing characters."
            value = "$IcingaCheckNetworkInterface_Object_DeviceSentBytesSecCrit$"
            order = 25
        }
        "-IfSlaveEnabledStateCrit" = {
            description = "Critical threshold for the State of a network Interface Team-Members/Slaves."
            value = "$IcingaCheckNetworkInterface_Object_IfSlaveEnabledStateCrit$"
            order = 33
        }
        "-PacketOutboundDiscardedWarn" = {
            description = "Warning threshold for network Interface Packets Outbound Discarded is the number of outbound packets that were chosen to be discarded even though no errors had been detected to prevent transmission."
            value = "$IcingaCheckNetworkInterface_Object_PacketOutboundDiscardedWarn$"
            order = 16
        }
        "-PacketOutboundDiscardedCrit" = {
            description = "Critical threshold for network Interface Packets Outbound Discarded is the number of outbound packets that were chosen to be discarded even though no errors had been detected to prevent transmission."
            value = "$IcingaCheckNetworkInterface_Object_PacketOutboundDiscardedCrit$"
            order = 17
        }
        "-IfTeamStatusWarn" = {
            description = "Warning threshold for the Status of a network Interface Teams."
            value = "$IcingaCheckNetworkInterface_Object_IfTeamStatusWarn$"
            order = 30
        }
        "-IncludeHidden" = {
            set_if = "$IcingaCheckNetworkInterface_Switchparameter_IncludeHidden$"
            order = 99
        }
        "-OutboundAvgBandUsageWarn" = {
            description = "Warning threshold for network Interface avg. Bytes Sent/sec is the average of outbound Bytes."
            value = "$IcingaCheckNetworkInterface_Object_OutboundAvgBandUsageWarn$"
            order = 20
        }
        "-IncomingAvgBandUsageWarn" = {
            description = "Warning threshold for network Interface avg. Bytes Received/sec is the average of incoming Bytes."
            value = "$IcingaCheckNetworkInterface_Object_IncomingAvgBandUsageWarn$"
            order = 18
        }
        "-DeviceTotalBytesSecCrit" = {
            description = "Critical threshold for network Interface Bytes Total/sec is the rate at which bytes are sent and received over each network adapter, including framing characters."
            value = "$IcingaCheckNetworkInterface_Object_DeviceTotalBytesSecCrit$"
            order = 23
        }
        "-PackteOutboundErrorWarn" = {
            description = "Warning threshold for network Interface Packets Outbound Errors is the number of outbound packets that could not be transmitted because of errors."
            value = "$IcingaCheckNetworkInterface_Object_PackteOutboundErrorWarn$"
            order = 12
        }
        "-DeviceTotalBytesSecWarn" = {
            description = "Warning threshold for network Interface Bytes Total/sec is the rate at which bytes are sent and received over each network adapter, including framing characters."
            value = "$IcingaCheckNetworkInterface_Object_DeviceTotalBytesSecWarn$"
            order = 22
        }
        "-IfTeamStatusCrit" = {
            description = "Critical threshold for the Status of a network Interface Teams."
            value = "$IcingaCheckNetworkInterface_Object_IfTeamStatusCrit$"
            order = 31
        }
        "-LinkSpeedWarn" = {
            description = "Warning threshold for the transmit link speed in (10 MBit, 100 MBit, 1 GBit, 10 GBit, 100 GBit, ...) of the network Interface."
            value = "$IcingaCheckNetworkInterface_Object_LinkSpeedWarn$"
            order = 28
        }
        "-IncludeNetworkDevice" = {
            description = "Specify the index of network adapters you want to include for checks. Example 4, 3"
            value = {{
                var arr = macro("$IcingaCheckNetworkInterface_Array_IncludeNetworkDevice$");
                if (len(arr) == 0) {
                return "@()";
                }
                return arr.join(",");
            }}
            order = 2
        }
        "-DeviceSentBytesSecWarn" = {
            description = "Warning threshold for network Interface Bytes Sent/sec is the rate at which bytes are sent over each network adapter, including framing characters."
            value = "$IcingaCheckNetworkInterface_Object_DeviceSentBytesSecWarn$"
            order = 24
        }
        "-DeviceReceivedBytesSecCrit" = {
            description = "Critical threshold for network Interface Bytes Received/sec is the rate at which bytes are received over each network adapter, including framing characters."
            value = "$IcingaCheckNetworkInterface_Object_DeviceReceivedBytesSecCrit$"
            order = 27
        }
        "-PackteReceivedErrorWarn" = {
            description = "Warning threshold for network Interface Packets Received Errors is the number of inbound packets that contained errors preventing them from being deliverable to a higher-layer protocol."
            value = "$IcingaCheckNetworkInterface_Object_PackteReceivedErrorWarn$"
            order = 10
        }
        "-PacketReceivedDiscardedWarn" = {
            description = "Warning threshold for network Interface Packets Received Discarded is the number of inbound packets that were chosen to be discarded even though no errors had been detected to prevent their delivery to a higher-layer protocol."
            value = "$IcingaCheckNetworkInterface_Object_PacketReceivedDiscardedWarn$"
            order = 14
        }
        "-IfConnectionStatusCrit" = {
            description = "Critical threshold for the state of the network adapter connection to the network."
            value = "$IcingaCheckNetworkInterface_Object_IfConnectionStatusCrit$"
            order = 38
        }
        "-IncludeInterfaceTeam" = {
            description = "Specify the name of network interface teams you want to include for checks. Example OutboundGroup, ClusterInterface"
            value = {{
                var arr = macro("$IcingaCheckNetworkInterface_Array_IncludeInterfaceTeam$");
                if (len(arr) == 0) {
                return "@()";
                }
                return arr.join(",");
            }}
            order = 5
        }
        "-PacketReceivedSecWarn" = {
            description = "Warning threshold for network Interface Packets Received/sec is the rate at which packets are received on the network interface."
            value = "$IcingaCheckNetworkInterface_Object_PacketReceivedSecWarn$"
            order = 6
        }
        "-PacketReceivedDiscardedCrit" = {
            description = "Critical threshold for network Interface Packets Received Discarded is the number of inbound packets that were chosen to be discarded even though no errors had been detected to prevent their delivery to a higher-layer protocol."
            value = "$IcingaCheckNetworkInterface_Object_PacketReceivedDiscardedCrit$"
            order = 15
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state"
            value = "$IcingaCheckNetworkInterface_Object_Verbosity$"
            order = 39
        }
        "-IfOperationalStatusCrit" = {
            description = "Critical threshold for the current network interface operational status."
            value = "$IcingaCheckNetworkInterface_Object_IfOperationalStatusCrit$"
            order = 36
        }
        "-IfSlaveEnabledStateWarn" = {
            description = "Warning threshold for the State of a network Interface Team-Members/Slaves."
            value = "$IcingaCheckNetworkInterface_Object_IfSlaveEnabledStateWarn$"
            order = 32
        }
        "-IfConnectionStatusWarn" = {
            description = "Warning threshold for the state of the network adapter connection to the network."
            value = "$IcingaCheckNetworkInterface_Object_IfConnectionStatusWarn$"
            order = 37
        }
        "-IfOperationalStatusWarn" = {
            description = "Warning threshold for the current network interface operational status."
            value = "$IcingaCheckNetworkInterface_Object_IfOperationalStatusWarn$"
            order = 35
        }
        "-ExcludeNetworkDevice" = {
            description = "Specify the index of network adapters you want to exclude for checks. Example 4, 3"
            value = {{
                var arr = macro("$IcingaCheckNetworkInterface_Array_ExcludeNetworkDevice$");
                if (len(arr) == 0) {
                return "@()";
                }
                return arr.join(",");
            }}
            order = 3
        }
        "-PacketReceivedSecCrit" = {
            description = "Critical threshold for network Interface Packets Received/sec is the rate at which packets are received on the network interface."
            value = "$IcingaCheckNetworkInterface_Object_PacketReceivedSecCrit$"
            order = 7
        }
        "-ExcludeInterfaceTeam" = {
            description = "Specify the name of network interface teams you want to exclude for checks. Example OutboundGroup, ClusterInterface"
            value = {{
                var arr = macro("$IcingaCheckNetworkInterface_Array_ExcludeInterfaceTeam$");
                if (len(arr) == 0) {
                return "@()";
                }
                return arr.join(",");
            }}
            order = 4
        }
        "-PacketSentSecCrit" = {
            description = "Critical threshold for network Interface Packets Sent/sec is the rate at which packets are sent on the network interface."
            value = "$IcingaCheckNetworkInterface_Object_PacketSentSecCrit$"
            order = 9
        }
        "-IfAdminStatusWarn" = {
            description = "Warning threshold for the network Interface administrative status."
            value = "$IcingaCheckNetworkInterface_Object_IfAdminStatusWarn$"
            order = 34
        }
        "-OutboundAvgBandUsageCrit" = {
            description = "Critical threshold for network Interface avg. Bytes Sent/sec is the average of outbound Bytes."
            value = "$IcingaCheckNetworkInterface_Object_OutboundAvgBandUsageCrit$"
            order = 21
        }
    }
    vars.IcingaCheckNetworkInterface_Switchparameter_IncludeHidden = false
    vars.IcingaCheckNetworkInterface_Switchparameter_NoPerfData = false
}

object CheckCommand "Invoke-IcingaCheckCheckSum" {
    import "PowerShell Base"

    arguments += {
        "-C" = {
            value = "try { Use-Icinga; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; exit 3; }; Exit-IcingaPluginNotInstalled 'Invoke-IcingaCheckCheckSum'; exit Invoke-IcingaCheckCheckSum"
            order = 0
        }
        "-Path" = {
            value = "$IcingaCheckCheckSum_String_Path$"
            order = 2
        }
        "-Verbosity" = {
            value = "$IcingaCheckCheckSum_Int32_Verbosity$"
            order = 5
        }
        "-Algorithm" = {
            description = "Used to specify a string, which contains the algorithm to be used.  Allowed algorithms: 'SHA1', 'SHA256', 'SHA384', 'SHA512', 'MD5'"
            value = "$IcingaCheckCheckSum_String_Algorithm$"
            order = 3
        }
        "-Hash" = {
            value = "$IcingaCheckCheckSum_String_Hash$"
            order = 4
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckCheckSum_Switchparameter_NoPerfData$"
            order = 99
        }
    }
    vars.IcingaCheckCheckSum_Switchparameter_NoPerfData = false
}

object CheckCommand "Invoke-IcingaCheckScheduledTask" {
    import "PowerShell Base"

    arguments += {
        "-TaskName" = {
            description = "A list of tasks to check for. If your tasks contain spaces, wrap them around a ' to ensure they are properly handled as string"
            value = {{
                var arr = macro("$IcingaCheckScheduledTask_Array_TaskName$");
                if (len(arr) == 0) {
                return "@()";
                }
                return arr.join(",");
            }}
            order = 2
        }
        "-C" = {
            value = "try { Use-Icinga; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; exit 3; }; Exit-IcingaPluginNotInstalled 'Invoke-IcingaCheckScheduledTask'; exit Invoke-IcingaCheckScheduledTask"
            order = 0
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckScheduledTask_Switchparameter_NoPerfData$"
            order = 99
        }
        "-State" = {
            description = "The state a task should currently have for the plugin to return [OK]"
            value = {{
                var arr = macro("$IcingaCheckScheduledTask_Array_State$");
                if (len(arr) == 0) {
                return "@()";
                }
                return arr.join(",");
            }}
            order = 3
        }
        "-Verbosity" = {
            description = "Increase the printed output message by adding additional details or print all data regardless of their status"
            value = "$IcingaCheckScheduledTask_Int32_Verbosity$"
            order = 4
        }
    }
    vars.IcingaCheckScheduledTask_Switchparameter_NoPerfData = false
}

object CheckCommand "Invoke-IcingaCheckBiosSerial" {
    import "PowerShell Base"

    arguments += {
        "-C" = {
            value = "try { Use-Icinga; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; exit 3; }; Exit-IcingaPluginNotInstalled 'Invoke-IcingaCheckBiosSerial'; exit Invoke-IcingaCheckBiosSerial"
            order = 0
        }
    }
}

object CheckCommand "Invoke-IcingaCheckEventlog" {
    import "PowerShell Base"

    arguments += {
        "-Before" = {
            description = "Used to specify a date like dd.mm.yyyy and every eventlog entry before that date will be considered."
            value = "$IcingaCheckEventlog_Object_Before$"
            order = 16
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckEventlog_Switchparameter_NoPerfData$"
            order = 99
        }
        "-IncludeMessage" = {
            description = "Used to specify an array of messages within the eventlog to be included."
            value = {{
                var arr = macro("$IcingaCheckEventlog_Array_IncludeMessage$");
                if (len(arr) == 0) {
                return "@()";
                }
                return arr.join(",");
            }}
            order = 11
        }
        "-IncludeSource" = {
            description = "Used to specify an array of message sources within the eventlog to be included."
            value = {{
                var arr = macro("$IcingaCheckEventlog_Array_IncludeSource$");
                if (len(arr) == 0) {
                return "@()";
                }
                return arr.join(",");
            }}
            order = 13
        }
        "-After" = {
            description = "Used to specify a date like dd.mm.yyyy and every eventlog entry after that date will be considered."
            value = "$IcingaCheckEventlog_Object_After$"
            order = 15
        }
        "-IncludeEventId" = {
            description = "Used to specify an array of events identified by their id to be included."
            value = {{
                var arr = macro("$IcingaCheckEventlog_Array_IncludeEventId$");
                if (len(arr) == 0) {
                return "@()";
                }
                return arr.join(",");
            }}
            order = 5
        }
        "-LogName" = {
            description = "Used to specify a certain log."
            value = "$IcingaCheckEventlog_String_LogName$"
            order = 4
        }
        "-C" = {
            value = "try { Use-Icinga; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; exit 3; }; Exit-IcingaPluginNotInstalled 'Invoke-IcingaCheckEventlog'; exit Invoke-IcingaCheckEventlog"
            order = 0
        }
        "-ExcludeSource" = {
            description = "Used to specify an array of message sources within the eventlog to be excluded."
            value = {{
                var arr = macro("$IcingaCheckEventlog_Array_ExcludeSource$");
                if (len(arr) == 0) {
                return "@()";
                }
                return arr.join(",");
            }}
            order = 14
        }
        "-ExcludeUsername" = {
            description = "Used to specify an array of usernames within the eventlog to be excluded."
            value = {{
                var arr = macro("$IcingaCheckEventlog_Array_ExcludeUsername$");
                if (len(arr) == 0) {
                return "@()";
                }
                return arr.join(",");
            }}
            order = 8
        }
        "-ExcludeEntryType" = {
            description = "Used to specify an array of entry types within the eventlog to be excluded."
            value = {{
                var arr = macro("$IcingaCheckEventlog_Array_ExcludeEntryType$");
                if (len(arr) == 0) {
                return "@()";
                }
                return arr.join(",");
            }}
            order = 10
        }
        "-IncludeEntryType" = {
            description = "Used to specify an array of entry types within the eventlog to be included."
            value = {{
                var arr = macro("$IcingaCheckEventlog_Array_IncludeEntryType$");
                if (len(arr) == 0) {
                return "@()";
                }
                return arr.join(",");
            }}
            order = 9
        }
        "-Verbosity" = {
            value = "$IcingaCheckEventlog_Int32_Verbosity$"
            order = 17
        }
        "-ExcludeEventId" = {
            description = "Used to specify an array of events identified by their id to be excluded."
            value = {{
                var arr = macro("$IcingaCheckEventlog_Array_ExcludeEventId$");
                if (len(arr) == 0) {
                return "@()";
                }
                return arr.join(",");
            }}
            order = 6
        }
        "-Critical" = {
            description = "Used to specify a Critical threshold."
            value = "$IcingaCheckEventlog_Object_Critical$"
            order = 3
        }
        "-DisableTimeCache" = {
            set_if = "$IcingaCheckEventlog_Switchparameter_DisableTimeCache$"
            order = 99
        }
        "-Warning" = {
            description = "Used to specify a Warning threshold."
            value = "$IcingaCheckEventlog_Object_Warning$"
            order = 2
        }
        "-IncludeUsername" = {
            description = "Used to specify an array of usernames within the eventlog to be included."
            value = {{
                var arr = macro("$IcingaCheckEventlog_Array_IncludeUsername$");
                if (len(arr) == 0) {
                return "@()";
                }
                return arr.join(",");
            }}
            order = 7
        }
        "-ExcludeMessage" = {
            description = "Used to specify an array of messages within the eventlog to be excluded."
            value = {{
                var arr = macro("$IcingaCheckEventlog_Array_ExcludeMessage$");
                if (len(arr) == 0) {
                return "@()";
                }
                return arr.join(",");
            }}
            order = 12
        }
    }
    vars.IcingaCheckEventlog_Switchparameter_NoPerfData = false
    vars.IcingaCheckEventlog_Switchparameter_DisableTimeCache = false
}

object CheckCommand "Invoke-IcingaCheckCPU" {
    import "PowerShell Base"

    arguments += {
        "-C" = {
            value = "try { Use-Icinga; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; exit 3; }; Exit-IcingaPluginNotInstalled 'Invoke-IcingaCheckCPU'; exit Invoke-IcingaCheckCPU"
            order = 0
        }
        "-Verbosity" = {
            value = "$IcingaCheckCPU_Int32_Verbosity$"
            order = 5
        }
        "-Warning" = {
            description = "Used to specify a Warning threshold. In this case an integer value."
            value = "$IcingaCheckCPU_Object_Warning$"
            order = 2
        }
        "-Core" = {
            description = "Used to specify a single core to check for. For the average load across all cores use `_Total`"
            value = "$IcingaCheckCPU_String_Core$"
            order = 4
        }
        "-Critical" = {
            description = "Used to specify a Critical threshold. In this case an integer value."
            value = "$IcingaCheckCPU_Object_Critical$"
            order = 3
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckCPU_Switchparameter_NoPerfData$"
            order = 99
        }
    }
    vars.IcingaCheckCPU_Switchparameter_NoPerfData = false
}

object CheckCommand "Invoke-IcingaCheckFirewall" {
    import "PowerShell Base"

    arguments += {
        "-Verbosity" = {
            value = "$IcingaCheckFirewall_Int32_Verbosity$"
            order = 3
        }
        "-C" = {
            value = "try { Use-Icinga; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; exit 3; }; Exit-IcingaPluginNotInstalled 'Invoke-IcingaCheckFirewall'; exit Invoke-IcingaCheckFirewall"
            order = 0
        }
        "-Profile" = {
            description = "Used to specify an array of profiles to check. Available profiles are 'Domain', 'Public', 'Private'"
            value = {{
                var arr = macro("$IcingaCheckFirewall_Array_Profile$");
                if (len(arr) == 0) {
                return "@()";
                }
                return arr.join(",");
            }}
            order = 2
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckFirewall_Switchparameter_NoPerfData$"
            order = 99
        }
        "-Enabled" = {
            set_if = "$IcingaCheckFirewall_Switchparameter_Enabled$"
            order = 99
        }
    }
    vars.IcingaCheckFirewall_Switchparameter_Enabled = false
    vars.IcingaCheckFirewall_Switchparameter_NoPerfData = false
}

object CheckCommand "Invoke-IcingaCheckUsedPartitionSpace" {
    import "PowerShell Base"

    arguments += {
        "-C" = {
            value = "try { Use-Icinga; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; exit 3; }; Exit-IcingaPluginNotInstalled 'Invoke-IcingaCheckUsedPartitionSpace'; exit Invoke-IcingaCheckUsedPartitionSpace"
            order = 0
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state"
            value = "$IcingaCheckUsedPartitionSpace_Int32_Verbosity$"
            order = 6
        }
        "-Warning" = {
            description = "Used to specify a Warning threshold. In this case an integer value."
            value = "$IcingaCheckUsedPartitionSpace_Object_Warning$"
            order = 2
        }
        "-IgnoreEmptyChecks" = {
            set_if = "$IcingaCheckUsedPartitionSpace_Switchparameter_IgnoreEmptyChecks$"
            order = 99
        }
        "-Include" = {
            description = "Used to specify an array of partitions to be included. If not set, the check expects that all not excluded partitions should be checked. e.g. 'C:\\','D:\\'"
            value = {{
                var arr = macro("$IcingaCheckUsedPartitionSpace_Array_Include$");
                if (len(arr) == 0) {
                return "@()";
                }
                return arr.join(",");
            }}
            order = 4
        }
        "-Critical" = {
            description = "Used to specify a Critical threshold. In this case an integer value."
            value = "$IcingaCheckUsedPartitionSpace_Object_Critical$"
            order = 3
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckUsedPartitionSpace_Switchparameter_NoPerfData$"
            order = 99
        }
        "-Exclude" = {
            description = "Used to specify an array of partitions to be excluded. e.g. 'C:\\','D:\\'"
            value = {{
                var arr = macro("$IcingaCheckUsedPartitionSpace_Array_Exclude$");
                if (len(arr) == 0) {
                return "@()";
                }
                return arr.join(",");
            }}
            order = 5
        }
        "-SkipUnknown" = {
            set_if = "$IcingaCheckUsedPartitionSpace_Switchparameter_SkipUnknown$"
            order = 99
        }
    }
    vars.IcingaCheckUsedPartitionSpace_Switchparameter_SkipUnknown = false
    vars.IcingaCheckUsedPartitionSpace_Switchparameter_IgnoreEmptyChecks = false
    vars.IcingaCheckUsedPartitionSpace_Switchparameter_NoPerfData = false
}

object CheckCommand "Invoke-IcingaCheckService" {
    import "PowerShell Base"

    arguments += {
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state"
            value = "$IcingaCheckService_Int32_Verbosity$"
            order = 5
        }
        "-Status" = {
            description = "Status for the specified service or services to check against."
            value = "$IcingaCheckService_String_Status$"
            order = 4
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckService_Switchparameter_NoPerfData$"
            order = 99
        }
        "-Service" = {
            description = "Used to specify an array of services which should be checked against the status. Supports '*' for wildcards."
            value = {{
                var arr = macro("$IcingaCheckService_Array_Service$");
                if (len(arr) == 0) {
                return "@()";
                }
                return arr.join(",");
            }}
            order = 2
        }
        "-Exclude" = {
            description = "Allows to exclude services which might come in handy for checking services which are configured to start automatically on Windows but are not running and weren't exited properly."
            value = {{
                var arr = macro("$IcingaCheckService_Array_Exclude$");
                if (len(arr) == 0) {
                return "@()";
                }
                return arr.join(",");
            }}
            order = 3
        }
        "-C" = {
            value = "try { Use-Icinga; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; exit 3; }; Exit-IcingaPluginNotInstalled 'Invoke-IcingaCheckService'; exit Invoke-IcingaCheckService"
            order = 0
        }
    }
    vars.IcingaCheckService_Switchparameter_NoPerfData = false
}


