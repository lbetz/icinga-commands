object CheckCommand "files" {
  command = [ PluginContribDir + "/check_files.pl" ]

  arguments = {
    "--timeout" = {
      value = "$files_timeout$"
      description = "timeout for command to finish (Default : 5)"
    }
    "--label" = {
      value = "$files_lable$"
      description = "output label (what prints first on status line)"
    }
    "--files" = {
      value = "$files_files$"
      description = "Which files to check. What is here is similar to what you use for listing file with ls i.e. *.temp would look for all temp files. This is converted to a regex and NOT an actual ls command input, so some errors are possible."
    }
    "--dir" = {
      value = "$files_dir$"
      description = "Directory name in which to check files. If this is specifies all file names given in -F will be relative to this directory."
    }
    "--filetype" = {
      value = "$files_filetype$"
      description = "Allows to specify if we should count only files or only directories. Default is to count both and ignore file type. 'files'|'dir'"
    }
    "--recurse" = {
      set_if = "$files_recurse$"
      description = "When present ls will do 'ls -r' and recursive check in subdirectories"
    }
    "--lsfiles" = {
      set_if = "$files_lsfiles$"
      description = "When present this adds specified file spec to ls. Now ls will list only files you specified with -F where as by default 'ls -l' will list all files in directory and choose some with regex. This option should be used if there are a lot of files in a directory. WARNING: using this option will cause -r not to work on most system"
    }
    "--cmd" = {
      value = "$files_cmd$"
      description = "By default the plugin will chdir to specified directory, do 'ls -l' and parse results. Here you can specify alternative cmd to execute that provides the data. This is used, for example, when files are to be checked on a remote system, in which case here you could be using 'ssh'."
    }
    "--stdin" = {
      set_if = "$files_stdin$"
      description = "Instead of executing 'ls -l' directory or command specified with -C plugin expects to get results in standard input. This is basically an alternative to -C which may not work in all cases"
    }
    "--perfparse" = {
      set_if = "$files_perfparse$"
      description = "Give number of files and file oldest file age in perfout"
    }
    "--warn" = {
      value = "$files_warning$"
      description = "Warning level(s) for number of files"
    }
    "--crit" = {
      value = "$files_critical$"
      description = "Critical level(s) for number of files"
    }
    "--age" = {
      value = "$files_age$"
      description = "Show file age if no WARN/CRIT threshold parameter specified. Check to make sure files are not older than the specified threshold(s). This number is in seconds. Also supports same extended spec as -w and -c"
    }
    "--size" = {
      value = "$files_size$"
      description = "Show file size if no WARN/CRIT threshold parameter specified. Check to make sure files are not larger than the specified threshold(s). This number is in octet/byte. Also supports same extended spec as -w and -c"
    }
    "--sumsize" = {
      value = "$files_sumsize$"
      description = "Show sum of file sizes if no WARN/CRIT threshold parameter specified. Check to make sure sum of file sizes are not larger than the specified threshold(s). This number is in octet/byte. Also supports same extended spec as -w and -c"
    }
  }

}


object CheckCommand "cpu" {
  command = [ PluginDir + "/check_cpu" ]

  arguments = {
    "--no-cpu-model" = {
      set_if = "$cpu_no_model$"
      description = "do not display the CPU model in the output message"
    }
    "--per-cpu" = {
      set_if = "$cpu_per_core$"
      description = "display the utilization of each CPU"
    }
    "--warning" = {
      value = "$cpu_warning$"
      description = "PERCENT warning threshold"
    }
    "--critical" = {
      value = "$cpu_critical$"
      description = "PERCENT critical threshold"
    }
    "delay" = {
      value = "$cpu_delay$"
      skip_key = true
      order = 98
      description = "is the delay between updates in seconds (default: 1sec)"
    }
    "count" = {
      value = "$cpu_count$"
      skip_key = true
      order = 99
      description = "is the number of updates (default: 2), 1 means the percentages of total CPU time from boottime"
    }
  }

  vars.cpu_warning = "85%"
  vars.cpu_critical = "95%"
  vars.cpu_no_model = true
}
