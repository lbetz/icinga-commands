object CheckCommand "pgactivity" {
 import "ipv4-or-ipv6"

 command = [ PluginDir + "/check_pgactivity" ]

 arguments = {
   "-h" = {
     value = "$pgactivity_address$"
     description = "Database server host or socket directory (default: $PGHOST or 'localhost')"
   }
   "-s" = {
     value = "$pgactivity_service$"
     description = "The Nagios service to run. See section SERVICES for a description of available services or use '--list' for a short service and description list."
     required = true
   }
   "-U" = {
     value = "$pgactivity_username$"
     description = "Database user name (default: $PGUSER or 'postgres')"
   }
   "-p" = {
     value = "$pgactivity_port$"
     description = "Database server port (default: $PGPORT or '5432')"
   }
   "-d" = {
     value = "$pgactivity_database$"
     description = "Database name to connect to (default: $PGDATABASE or 'template1'). WARNING! This is not necessarily one of the database that will be checked. See '--dbinclude' and '--dbexclude'."
   }
   "-S" = {
     value = "$pgactivity_dbservice$"
     description = "The connection service name from pg_service.conf to use."
   }
   "--dbexclude" = {
     value = "$pgactivity_dbexclude$"
     description = "Some services automatically check all the databases of your cluster (note: that does not mean they always need to connect on all of them to check them though). '--dbexclude' excludes                      any database whose name matches the given Perl regular expression. Repeat this option as many time as needed."
   }
   "--dbinclude" = {
     value = "$pgactivity_dbinclude$"
     description = "Some services automatically check all the databases of your cluster (note: that does not imply that they always need to connect to all of them though). Some always exclude the 'postg                     res' database and templates. '--dbinclude' checks ONLY databases whose names match the given Perl regular expression. Repeat this option as many time as needed."
   }
   "-w" = {
     value = "$pgactivity_warning$"
     description = "The Warning threshold."
   }
   "-c" = {
     value = "$pgactivity_critical$"
     description = "The Critical threshold."
   }
   "--format" = {
     value = "$pgactivity_format$"
     description = "The output format. Supported output are: 'binary', 'debug', 'human', 'nagios', 'nagios_strict', 'json' and 'json_strict'. Using the 'binary' format, the results are written in a bina                     ry file (using perl module 'Storable') given in argument '--output'. If no output is given, defaults to file 'check_pgactivity.out' in the same directory as the script.  The 'nagios_strict' and 'json_str                     ict' formats are equivalent to the 'nagios' and 'json' formats respectively. The only difference is that they enforce the units to follow the strict Nagios specs: B, c, s or %. Any unit absent from this                      list is dropped (Bps, Tps, etc)."
   }
   "--tmpdir" = {
     value = "$pgactivity_tempdir$"
     description = "Path to a directory where the script can create temporary files. The script relies on the system default temporary directory if possible."
   }
   "--psql" = {
     value = "$pgactivity_psql$"
     description = "Path to the 'psql' executable (default: 'psql'). It should be version 8.3 at least, but the server can be older."
   }
   "--status-file" = {
     value = "$pgactivity_status_file$"
     description = "Path to the file where service status information is kept between successive calls. Default is to save check_pgactivity.data in the same directory as the script."
   }
   "--timeout" = {
     value = "$pgactivity_timeout$"
     description = "Timeout (default: '30s'), as raw (in seconds) or as an interval. This timeout will be used as 'statement_timeout' for psql and URL timeout for 'minor_version' service."
   }
   "--query" = {
     value = "$pgactivity_query$"
     description = "Custom SQL query."
   }
 }

 env = {
   "PGPASSWORD" = "$pgactivity_password$"
   "PGDATABASE" = "postgres"
 }

 vars.pgactivity_address = "$check_address$"
}


object CheckCommand "pgactivity_connection" {
 import "pgactivity"

 vars.pgactivity_service = "connection"
}
