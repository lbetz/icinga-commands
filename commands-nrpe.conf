if (!globals.contains("NrpePluginPath")) {
        globals.NrpePluginPath = "/bin"
}

globals.nrpe_prefix = function(prefix, pmacro) {
	return function() use (prefix, pmacro) {
		var values = macro(pmacro)
		if (typeof(values) == Array) {
			var result = []
			for (value  in values) {
				result += [ prefix + value ]
			}
			return result
		} else {
			return [ prefix + values ]
		}
	}
}

template CheckCommand "nrpe-legacy" {
	import "nrpe"

	arguments += {
		"-a" = {
			set_if = "$nrpe_args$"
			order = 1
		}
		"arguments" = {
			value = "$nrpe_arguments$"
			skip_key = true
			order = 2
		}
		"show-all" = {
      set_if = "$nrpe_showall$"
			skip_key = true
			value = "show-all"
			order = 4
		}
	}

	vars.nrpe_args = true
	vars.nrpe_showall = false
}

object CheckCommand "nrpe-legacy-counter" {
	import "nrpe-legacy"

  arguments += {
    "counter" = {
      value = nrpe_prefix("counter=", "$nscp_counter_name$")
      skip_key = true
			required = true
			order = 2
		}
    "warning" = {
      value = "warning=value>$nscp_counter_warning$"
      skip_key = true
			order = 3
    }
    "critical" = {
      value = "critical=value>$nscp_counter_critical$"
      skip_key = true
			order = 3
    }
	}

  vars.nrpe_command = "check_pdh"
	vars.nrpe_arguments = "$nscp_counter_arguments$"
	vars.nrpe_showall = "$nscp_counter_showall$"
}

object CheckCommand "nrpe-legacy-service" {
	import "nrpe-legacy"

  arguments += {
    "service" = {
      value = nrpe_prefix("service=", "$nscp_service_name$")
      skip_key = true
	    order = 2
    }
    "ok" = {
      value = "ok=$nscp_service_otype$='$nscp_service_ok$'"
      skip_key = true
	    order = 3
    }
    "warning" = {
      value = "warning=$nscp_service_wtype$='$nscp_service_warning$'"
      skip_key = true
			order = 3
    }
    "critical" = {
      value = "critical=$nscp_service_ctype$='$nscp_service_critical$'"
      skip_key = true
			order = 3
    }
  }

  vars.nrpe_command = "check_service"
	vars.nrpe_arguments = "$nscp_service_arguments$"
	vars.nrpe_showall = "$nscp_service_showall$"

  vars.nscp_service_showall = true
  vars.nscp_service_type = "state"
  vars.nscp_service_otype = vars.nrpe_service_type
  vars.nscp_service_wtype = vars.nrpe_service_type
  vars.nscp_service_ctype = vars.nrpe_service_type
}

object CheckCommand "nrpe-legacy-cpu" {
	import "nrpe-legacy"

	arguments += {
		"time" = {
			value = nrpe_prefix("time=", "$nscp_cpu_time$")
			skip_key = true
			order = 2
		}
		"warning" = {
			value = "warning=load > $nscp_cpu_warning$"
			skip_key = true
			order = 3
		}
		"critical" = {
			value = "critical=load > $nscp_cpu_critical$"
			skip_key = true
			order = 3
		}

	}

	vars.nrpe_command = "check_cpu"
	vars.nrpe_arguments = "$nscp_cpu_arguments$"
	vars.nrpe_showall = "$nscp_cpu_showall$"

	vars.nscp_cpu_time = [ "1m", "5m", "15m" ]
	vars.nscp_cpu_showall = true
	vars.nscp_cpu_warning = 80
	vars.nscp_cpu_critical = 90
}

object CheckCommand "nrpe-legacy-memory" {
  import "nrpe-legacy"

  arguments += {
    "type=committed" = {
			set_if = "$nscp_memory_committed$"
      value = "type=committed"
      skip_key = true
			order = 2
    }
    "type=physical" = {
			set_if = "$nscp_memory_physical$"
      value = "type=physical"
      skip_key = true
			order = 2
    }
    "warning" = {
      value = "warning=$nrpe_memory_op$ $nscp_memory_warning$"
      skip_key = true
			order = 3
    }
    "critical" = {
      value = "critical=$nrpe_memory_op$ $nscp_memory_critical$"
      skip_key = true
			order = 3
    }
  }

  vars.nrpe_command = "check_memory"
	vars.nrpe_arguments = "$nscp_memory_arguments$"
	vars.nrpe_showall = "$nscp_memory_showall$"

  vars.nrpe_memory_op = {{
    if (macro("$nscp_memory_free$") == false) {
      return "used >"
    } else {
      return "free <"
    }
  }}

  vars.nscp_memory_showall = true
  vars.nscp_memory_physical = true
  vars.nscp_memory_committed = false
  vars.nscp_memory_free = true
  vars.nscp_memory_warning = {{
    if (macro("$nscp_memory_free$") == false) { return 80 } else { return 20 }
  }}
  vars.nscp_memory_critical = {{
    if (macro("$nscp_memory_free$") == false) { return 90 } else { return 10 }
  }}
}

object CheckCommand "nrpe-legacy-disk" {
  import "nrpe-legacy"

  arguments += {
    "warning" = {
      value = "warning=$nrpe_disk_op$ $nscp_disk_warning$"
      skip_key = true
			order = 1
    }
    "critical" = {
      value = "critical=$nrpe_disk_op$ $nscp_disk_critical$"
      skip_key = true
			order = 1
    }
		"drive" = {
			value = nrpe_prefix("drive=", "$nscp_disk_drive$")
			skip_key = true
			order = 3
		}
  }

  vars.nrpe_command = "check_drivesize"
	vars.nrpe_arguments = "$nscp_disk_arguments$"
	vars.nrpe_showall = "$nscp_disk_showall$"

  vars.nrpe_disk_op = {{
    if (macro("$nscp_disk_free$") == false) {
      return "used >"
    } else {
      return "free <"
    }
  }}

  vars.nscp_disk_showall = true
  vars.nscp_disk_free = false
  vars.nscp_disk_warning = {{
    if (macro("$nscp_disk_free$") == false) { return 80 } else { return 20 }
  }}
  vars.nscp_disk_critical = {{
    if (macro("$nscp_disk_free$") == false) { return 90 } else { return 10 }
  }}
}

object CheckCommand "nscp-nrpe" {
  import "plugin-check-command"
  import "ipv4-or-ipv6"

  command = [ NrpePluginPath + "/check_nrpe" ]

	arguments = {
		"host" = {
			value = "host=$nrpe_host$"
			description = "The host of the host running the server."
			skip_key = true
		}
		"port" = {
			value = "port=$nrpe_port$"
			description = "The port of the host running the server."
			skip_key = true
		}
		"address" = {
			value = "address=$nrpe_address$"
			description = "The address (host:port) of the host running the server."
			skip_key = true
		}
		"timeout" = {
			value = "timeout=$nrpe_timeout$"
			description = "Number of seconds before connection times out (default=10)."
			skip_key = true
		}
		"target" = {
			value = "target=$nrpe_target$"
			description = "Target to use (lookup connection info from config)."
			skip_key = true
		}
		"retry" = {
			value = "retry=$nrpe_retry$"
			description = "Number of times to retry a failed connection attempt (default=2)."
			skip_key = true
		}
		"command" = {
			value = "command=$nrpe_command$"
			description = "The name of the query that the remote daemon should run."
			skip_key = true
		}
		"arguments" = {
			value = nrpe_prefix("arguments=", "$nrpe_arguments$")
			description = "A list of arguments."
			skip_key = true
		}
		"query-command" = {
			value = "query-command=$nrpe_query_command$"
			description = "The name of the query that the remote daemon should run."
			skip_key = true
		}
		"query-arguments" = {
			value = "query-arguments=$nrpe_query_arguments$"
			description = "A list of arguments."
			skip_key = true
		}
		"no-ssl" = {
			set_if = "$nrpe_nossl$"
			description = "Do not initial an ssl handshake with the server, talk in plain-text."
		}
		"certificate" = {
			value = "certificate=$nrpe_certificate$"
			description = "Client certificate to use."
			skip_key = true
		}
		"dh" = {
			value = "dh=$nrpe_dh$"
			description = "The pre-generated DH key (if ADH is used this will be your 'key' though it is not a secret key)."
			skip_key = true
		}
		"certificate-format" = {
			value = "certificate-format=$nrpe_certificate_format$"
                       	description = "Client certificate format (default is PEM)."
			skip_key = true
		}
		"certificate-key" = {
			value = "certificate-key=$nrpe_certificate_key$"
			description = "Client key to use."
			skip_key = true
		}
		"insecure" = {
			set_if = "$nrpe_insecure$"
			description = "Use insecure legacy mode."
		}
		"ca" = {
			value = "ca=$nrpe_ca$"
			description = "A file representing the Certificate authority used to validate peer certificates."
			skip_key = true
		}
		"verify" = {
			value = "verify=$nrpe_verify$"
			description = "Which verification mode to use: none: no verification, peer: that peer has a certificate, peer-cert: that peer has a valid certificate, ..."
			skip_key = true
		}
		"allowed-ciphers" = {
			value = "allowed-ciphers=$nrpe_allowd_ciphers$"
			description = "Which ciphers are allowed for legacy reasons this defaults to ADH which is not secure preferably set this to DEFAULT which is better or a an even stronger cipher."
			skip_key = true
		}
		"payload-length" = {
			value = "payload-length=$nrpe_payload_length$"
			description = "Length of payload (has to be same as on the server)."
			skip_key = true
		}
		"buffer-length" = {
			value = "buffer-length=$nrpe_buffer_length$"
			description = "Same as payload-length (used for legacy reasons)."
			skip_key = true
		}
		"ssl" = {
			set_if = "$nrpe_ssl$"
			description = "Initial an ssl handshake with the server."
		}
		"show-all" = {
			set_if = "$nrpe_showall$"
			description = "Print more details in output."
			value = "arguments=show-all"
			skip_key = true
		}
	}

	vars.nrpe_host = "$check_address$"
	vars.nrpe_certificate = SysconfDir + "/icinga2/pki/" + NodeName + ".crt"
	vars.nrpe_certificate_key = SysconfDir + "/icinga2/pki/" + NodeName + ".key"
	vars.nrpe_ca = SysconfDir + "/icinga2/pki/ca.crt"
	vars.nrpe_verity = "peer-cert"
	vars.nrpe_showall = false
}

object CheckCommand "nscp-nrpe-cpu" {
  import "nscp-nrpe"

	arguments += {
		"warning" = {
			value = "arguments=warning=load > $nscp_cpu_warning$"
			skip_key = true
		}
		"critical" = {
			value = "arguments=critical=load > $nscp_cpu_critical$"
			skip_key = true
		}
		"time" = {
			value = nrpe_prefix("arguments=time=", "$nscp_cpu_time$")
			skip_key = true
		}
	}

	vars.nrpe_command = "check_cpu"
	vars.nrpe_arguments = "$nscp_cpu_arguments$"
	vars.nrpe_showall = "$nscp_cpu_showall$"

	vars.nscp_cpu_time = [ "1m", "5m", "15m" ]
	vars.nscp_cpu_showall = true
	vars.nscp_cpu_warning = 80
	vars.nscp_cpu_critical = 90
}

object CheckCommand "nscp-nrpe-memory" {
	import "nscp-nrpe"

	arguments += {
		"type=committed" = {
			value = "arguments=type=committed"
			set_if = "$nscp_memory_committed$"
			skip_key = true
		}
		"type=physical" = {
			value = "arguments=type=physical"
			set_if = "$nscp_memory_physical$"
			skip_key = true
		}
		"warning" = {
			value = "arguments=warning=$nrpe_memory_op$ $nscp_memory_warning$"
			skip_key = true
		}
		"critical" = {
			value = "arguments=critical=$nrpe_memory_op$ $nscp_memory_critical$"
			skip_key = true
		}
	}

	vars.nrpe_command = "check_memory"
	vars.nrpe_arguments = "$nscp_memory_arguments$"
	vars.nrpe_showall = "$nscp_memory_showall$"

	vars.nrpe_memory_op = {{
		if (macro("$nscp_memory_free$") == false) {
			return "used >"
		} else {
			return "free <"
		}
	}}

	vars.nscp_memory_showall = true
	vars.nscp_memory_physical = true
	vars.nscp_memory_committed = false
	vars.nscp_memory_free = true
	vars.nscp_memory_warning = {{
		if (macro("$nscp_memory_free$") == false) { return 80 } else { return 20 }
	}}
	vars.nscp_memory_critical = {{
		if (macro("$nscp_memory_free$") == false) { return 90 } else { return 10 }
	}}
}

object CheckCommand "nscp-nrpe-disk" {
	import "nscp-nrpe"

	arguments += {
		"warning" = {
			value = "arguments=warning=$nrpe_disk_op$ $nscp_disk_warning$"
			skip_key = true
		}
		"critical" = {
			value = "arguments=critical=$nrpe_disk_op$ $nscp_disk_critical$"
			skip_key = true
		}
		"drive" = {
			value = nrpe_prefix("arguments=drive=", "$nscp_disk_drive$")
			skip_key = true
		}
	}

	vars.nrpe_command = "check_drivesize"
	vars.nrpe_arguments = "$nscp_disk_arguments$"
	vars.nrpe_showall = "$nscp_disk_showall$"

	vars.nrpe_disk_op = {{
		if (macro("$nscp_disk_free$") == false) {
			return "used >"
		} else {
			return "free <"
		}
	}}

	vars.nscp_disk_showall = true
	vars.nscp_disk_free = false
	vars.nscp_disk_warning = {{
		if (macro("$nscp_disk_free$") == false) { return 80 } else { return 20 }
	}}
	vars.nscp_disk_critical = {{
		if (macro("$nscp_disk_free$") == false) { return 90 } else { return 10 }
	}}
}

object CheckCommand "nscp-nrpe-service" {
	import "nscp-nrpe"

	arguments += {
		"ok" = {
			value = "arguments=ok=$nscp_service_otype$='$nscp_service_ok$'"
			skip_key = true
		}
		"warning" = {
			value = "arguments=warning=$nscp_service_wtype$='$nscp_service_warning$'"
			skip_key = true
		}
		"critical" = {
			value = "arguments=critical=$nscp_service_ctype$='$nscp_service_critical$'"
			skip_key = true
		}
		"service" = {
			value = nrpe_prefix("arguments=service=", "$nscp_service_name$")
			skip_key = true
		}
	}

	vars.nrpe_command = "check_service"
	vars.nrpe_arguments = "$nscp_service_arguments$"
	vars.nrpe_showall = "$nscp_service_showall$"

	vars.nscp_service_showall = true
	vars.nscp_service_type = "state"
	vars.nscp_service_otype = vars.nscp_service_type
	vars.nscp_service_wtype = vars.nscp_service_type
	vars.nscp_service_ctype = vars.nscp_service_type
}

object CheckCommand "nscp-nrpe-counter" {
	import "nscp-nrpe"

	arguments += {
		"warning" = {
			value = "arguments=warning=value>$nscp_counter_warning$"
			skip_key = true
		}
		"critical" = {
			value = "arguments=critical=value>$nscp_counter_critical$"
			skip_key = true
		}
		"counter" = {
			value = nrpe_prefix("arguments=counter=", "$nscp_counter_name$")
			skip_key = true
			required = true
		}
	}

	vars.nrpe_command = "check_pdh"
	vars.nrpe_arguments = "$nscp_counter_arguments$"
	vars.nrpe_showall = "$nscp_counter_showall$"
}
